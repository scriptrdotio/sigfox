var config = require("./config");

/**
 * Wrapper around device APIs
 * @class Device
 * @constructor
 * @param {Object} dto: contains the device's properties (id and client are mandatory)
 */
function Device(dto) {
    
    if (!dto || !dto.id || !dto.client) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "/sigfox/device: dto.id and dto.client cannot be null or empty"
        };
    }
    
    for (var key in dto){
        this[key] = dto[key];
    }
}

/**
 * Get latest current network status of the device
 * @method getNetworkState
 * @return {Object} {networkStatus: "OK|NOK"}
 * @throws {Error}
 */
Device.prototype.getNetworkState = function() {
  
  var requestParameters = {
    url: config.urlPrefix + "/devices/" + this.id 
  };
  
  var resp = this.client.callApi(requestParameters);
  var networkStateCode = resp.state;
  var networkState = "";
  switch (networkStateCode){
      case 0: 
          networkState = "OK";
          break;
      case 1:
          networkState = "DEAD";
          break;
      case 2:
          networkState = "OFF_CONTRACT";
          break;
      case 3:
          networkState = "DISABLED";
          break;
      case 4:
          networkState = "WARN";
          break;
      case 5:
          networkState = "DELETED";
          break;
      case 6:
          networkState = "SUSPENDED";
          break;
      case 7:
          networkState = "NOT_ACTIVABLE";
          break;
      default:
          networkState = "Unrecognized Code";
  }
  return {"code":networkStateCode, "networkState":networkState};
};