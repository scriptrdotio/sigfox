var config = require("./config");
var clientModule = require("./client");
var deviceTypeModule = require("./devicetype");

/**
 * This class wraps some of Sigfox's device types operations
 * @class DeviceTypeManager
 * @constructor
 * @param {String login} : sigfox login. Optional, defaults to ./config.username
 * @param {String password} : sigfox password. Optional, defaults to ./config.password
 * @throws {Error}
 */
function DeviceTypeManager(dto) {

  if (dto){
    
    for (var key in dto) {
      this[key] = dto[key];
    }
  }
  
  if (!this.login) {
    this.username = config.login;
  }
  
  if (!this.password) {
    this.password = config.password;
  }
  
  this.client = new clientModule.Client{login: this.login, password: this.password};
}

/**
 * @method listDeviceTypes
 * @param {Object} [params] : optional parameters
 * @param {Array} [params.groupIds]: Search for device types which are attached to a Group. Example: ?groupIds=xx,yy. Optional
 * @param {Boolean} [params.deep]: When true, if a group identifier is specified, also includes its subgroups. Optional, defaults to false
 * @param {String} [params.contractId]: Sigfox contract id, used in the group. Optional
 * @return {Array} array of DeviceType objects (@see ./devicetype.DeviceType)
 */
DeviceTypeManager.prototype.listDeviceTypes = function(params) {
  
  var requestParameters = {
    
    url: config.urlPrefix + "/device-types",
    method: "GET",
    params: {}
  };
    
  if (params && params.groupIds) {
    requestParameters.params.groupIds = params.groupIds;
  }
    
  if (params && params.deep) {
    requestParameters.params.deep = params.deep;
  }
  
  if (params && params.contractId) {
    requestParameters.params.contractId = params.contractId;
  } 
  
  var resp = this.client.callApi(requestParameters).data;
  var deviceTypeList = [];
  for(var i = 0; i < resp.length; i++) {
    
    var deviceType = new deviceTypeModule.DeviceType(resp[i], this.client);
    deviceTypeList.push(deviceType);
  }
  
  return deviceTypeList;
};


/**
 * @method getDeviceType
 * @param {String} id : the requested device type id
 * @return {Object} instance of DeviceType (@see ./devicetype.DeviceType)
 */
DeviceTypeManager.prototype.getDeviceType = function(id) {
  
  var requestParameters = {
    
    url: config.urlPrefix + "/device-types/" + id,
    method: "GET"
  };
  
  var resp = this.client.callApi(requestParameters);
  var deviceType = new deviceTypeModule.DeviceType(resp, this.client);
  return deviceType;
};
