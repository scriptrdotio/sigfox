var config = require("./config");
var http = require("http");

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 */
function Client(dto) {
 
  this.login = dto.login ? dto.login : config.login;
  this.password = dto.password ? dto.password : config.password;
}

/**
 * Invoke a given API. 
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.url : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
Client.prototype.callApi = function(params) {
  try {   
     return this._callApi(params);
  }catch(response) {
    
    if (response.status == "401" && response.body.indexOf("expired") > -1) {
   
      try {
        return this._callApi(params);
      }catch(response) {
        this._handleError(response);
      }
    }else {
      this._handleError(response);
    }    
  }
};

Client.prototype._callApi = function(params) {
  
  if (params.params && (!params.method || params.method == "GET")) {
    params.params = this._paramsToString(params.params);
  }
  
  if (params.params && (params.method == "POST" || params.method == "PUT")) {
    
    params.bodyString = JSON.stringify(params.params);
    delete params.params;
  }
  
  params.url = params.url.indexOf("http") > -1 ? params.url : config.apiUrl + "/" +  config.apiVer + params.url;
  if (params.headers){
      params.headers = params.headers;
      params.headers["Authorization"] = "Basic " + btoa(this.login + ":" + this.password);
  }else{
      params.headers = {
        "Authorization": "Basic " + btoa(this.login + ":" + this.password)
      };
  }
    
  //console.log(JSON.stringify(params));
  var response = http.request(params);
  //console.log("Received following response  : " + JSON.stringify(response));
  if (response.status >= "200" && response.status < "300") {
    
    var responseBody = "";
    if (response.body) {
      
      try { 
        responseBody = JSON.parse(response.body ?  response.body : {});
      }catch(exception) {
        responseBody = response.body;
      } 
    }    
    
    if (responseBody.message) {
      throw response;
    }else {
      return responseBody;
    }
  }else {
    throw response;
  }
};

  
Client.prototype._handleError = function(response) {
   
  var errorObj = "";
  try {    
    errorObj = JSON.parse(response.body);
  }catch(e) {
    
    // probably not JSON, check for the reason of the error in <pre>xxx</rep>
    var reasonStart = response.body.indexOf("<pre>");
    if (reasonStart > -1) {
      
      reasonStart = reasonStart + "<pre>".length;
      var reasonEnd = response.body.indexOf("</pre>");
      errorObj = response.status + ": " + response.body.substring(reasonStart, reasonEnd - 1).trim();
    }else {
      errorObj = response.body;
    }
  };

  throw {
    "errorCode": "Invocation_Error",
    "errorDetail": errorObj
  };
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
Client.prototype._paramsToString = function(params) {
  
  var newParams = {};
  for (var p in params) {
    
    if (typeof(params[p]) != "object") {
    	newParams[p] = "" +  params[p];
    }else {
      newParams[p] = params[p];
    }
  }
  
  return newParams;
};			